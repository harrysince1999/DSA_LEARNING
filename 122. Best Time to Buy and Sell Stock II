// Recursive Approch
class Solution {
public:
    int solve(vector<int>& price, int i, int buy)
    {
        if(i==price.size()) return 0;
        int profit=0;
        if(buy==1){
            profit = max(-price[i] + solve(price,i+1,0), solve(price,i+1,1));
        }
        else
        {
            profit = max(price[i]+solve(price,i+1,1),solve(price,i+1,0));
        }
        return profit;
    }
    int maxProfit(vector<int>& prices) {
        return solve(prices,0,1);
    }
};


// DP 

class Solution {
public:
    int solve(vector<int>& price, int i, int buy,vector<vector<int>> &dp)
    {
        if(i==price.size()) return 0;
        if(dp[i][buy]!=-1)  return dp[i][buy];
        int profit=0;
        if(buy==1){
            profit = max(-price[i] + solve(price,i+1,0,dp), solve(price,i+1,1,dp));
        }
        else
        {
            profit = max(price[i]+solve(price,i+1,1,dp),solve(price,i+1,0,dp));
        }
        return dp[i][buy]=profit;
    }
    int maxProfit(vector<int>& prices) {
        vector<vector<int>> dp(prices.size(),vector<int>(2,-1));
        return solve(prices,0,1,dp);
    }
};
