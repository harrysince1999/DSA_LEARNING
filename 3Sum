    vector<vector<int>> threeSum(vector<int>& nums) {
        // vector<vector<int>>ans;
        // sort(nums.begin(),nums.end());
        // set<vector<int>> s;
        // for(int i=0;i<nums.size()-2;i++)
        // {
        //     for(int j=i+1;j<nums.size()-1;j++)
        //     {
        //         for(int k=j+1;k<nums.size();k++)
        //         {
        //             if(nums[i]+nums[j]+nums[k]==0)
        //                s.insert({nums[i],nums[j],nums[k]});
        //         }
        //     }
        // }
        // for(auto it: s)
        //     ans.push_back(it);
        // return ans;

//         vector<vector<int>>ans;
//         set<vector<int>>s;
//         map<int,int>mp;
//         for(int i=0;i<nums.size();i++)
//             mp[nums[i]]++;
        
//         for(int i=0;i<nums.size();i++)
//         {
//             mp[nums[i]]--;
//             for(int j=i+1;j<nums.size();j++)
//             {
//                 mp[nums[j]]--;
//                 if(mp.find((-(nums[i]+nums[j])))!=mp.end())
//                 {
//                     vector<int>k;
//                     k.push_back(nums[i]);
//                     k.push_back(nums[j]);
//                     k.push_back(-(nums[i]+nums[j]));
//                     sort(k.begin(),k.end());
//                     s.insert(k);
//                 }
//                 mp[nums[j]]++;
//             }
//             mp[nums[i]]++;
//         }
//         for(auto it: s)
//             ans.push_back(it);
//         return ans;
        
        
// best approch using two pointer and sorting
        sort(nums.begin(),nums.end());
        vector<vector<int>> ans;
        for(int i=0;i<nums.size()-2;i++)
        {
            if(i==0 || (i>0 && nums[i]!=nums[i-1]))
            {
                int lo=i+1, hi= nums.size()-1, sum= 0-nums[i];
                while(lo<hi)
                {
                    if(nums[lo]+nums[hi]==sum)
                    {
                        ans.push_back({nums[i],nums[lo],nums[hi]});
                        while(lo<hi && nums[lo]==nums[lo+1] )   lo++;
                        while(lo<hi && nums[hi]==nums[hi-1])    hi--;
                        lo++;
                        hi--;
                    }
                    else if(nums[lo]+nums[hi]<sum)  lo++;
                    else    hi--;
                }
            }
        }
        return ans;
    }
